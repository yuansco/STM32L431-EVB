ARM GAS  /tmp/ccqXi5Qg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB137:
  28              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "board.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  /tmp/ccqXi5Qg.s 			page 2


  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** /* USER CODE END PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PM */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  42:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** UART_HandleTypeDef huart1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE BEGIN PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/main.c **** void SystemClock_Config(void);
  52:Core/Src/main.c **** static void MX_GPIO_Init(void);
  53:Core/Src/main.c **** static void MX_I2C1_Init(void);
  54:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  55:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PFP */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  60:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END 0 */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /**
  65:Core/Src/main.c ****   * @brief  The application entry point.
  66:Core/Src/main.c ****   * @retval int
  67:Core/Src/main.c ****   */
  68:Core/Src/main.c **** int main(void)
  69:Core/Src/main.c **** {
  70:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c ****   /* USER CODE END 1 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  77:Core/Src/main.c ****   HAL_Init();
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE END Init */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* Configure the system clock */
  84:Core/Src/main.c ****   SystemClock_Config();
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  87:Core/Src/main.c **** 
ARM GAS  /tmp/ccqXi5Qg.s 			page 3


  88:Core/Src/main.c ****   /* USER CODE END SysInit */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Initialize all configured peripherals */
  91:Core/Src/main.c ****   MX_GPIO_Init();
  92:Core/Src/main.c ****   MX_I2C1_Init();
  93:Core/Src/main.c ****   MX_USART1_UART_Init();
  94:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  95:Core/Src/main.c ****   BOARD_Init();
  96:Core/Src/main.c ****   /* USER CODE END 2 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Infinite loop */
  99:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 100:Core/Src/main.c ****   while (1)
 101:Core/Src/main.c ****   {
 102:Core/Src/main.c ****     /* USER CODE END WHILE */
 103:Core/Src/main.c ****     BOARD_Loop();
 104:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 105:Core/Src/main.c ****   }
 106:Core/Src/main.c ****   /* USER CODE END 3 */
 107:Core/Src/main.c **** }
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** /**
 110:Core/Src/main.c ****   * @brief System Clock Configuration
 111:Core/Src/main.c ****   * @retval None
 112:Core/Src/main.c ****   */
 113:Core/Src/main.c **** void SystemClock_Config(void)
 114:Core/Src/main.c **** {
 115:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 116:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 119:Core/Src/main.c ****   */
 120:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 121:Core/Src/main.c ****   {
 122:Core/Src/main.c ****     Error_Handler();
 123:Core/Src/main.c ****   }
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 126:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 127:Core/Src/main.c ****   */
 128:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 129:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 130:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 132:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 133:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 1;
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 10;
 135:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 136:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 137:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 138:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 139:Core/Src/main.c ****   {
 140:Core/Src/main.c ****     Error_Handler();
 141:Core/Src/main.c ****   }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 144:Core/Src/main.c ****   */
ARM GAS  /tmp/ccqXi5Qg.s 			page 4


 145:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 146:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 147:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 148:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 149:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 150:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 153:Core/Src/main.c ****   {
 154:Core/Src/main.c ****     Error_Handler();
 155:Core/Src/main.c ****   }
 156:Core/Src/main.c **** }
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** /**
 159:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 160:Core/Src/main.c ****   * @param None
 161:Core/Src/main.c ****   * @retval None
 162:Core/Src/main.c ****   */
 163:Core/Src/main.c **** static void MX_I2C1_Init(void)
 164:Core/Src/main.c **** {
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 173:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 174:Core/Src/main.c ****   hi2c1.Init.Timing = 0x10909CEC;
 175:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 176:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 177:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 178:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 179:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 180:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 181:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 182:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 183:Core/Src/main.c ****   {
 184:Core/Src/main.c ****     Error_Handler();
 185:Core/Src/main.c ****   }
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /** Configure Analogue filter
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 190:Core/Src/main.c ****   {
 191:Core/Src/main.c ****     Error_Handler();
 192:Core/Src/main.c ****   }
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /** Configure Digital filter
 195:Core/Src/main.c ****   */
 196:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 197:Core/Src/main.c ****   {
 198:Core/Src/main.c ****     Error_Handler();
 199:Core/Src/main.c ****   }
 200:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 201:Core/Src/main.c **** 
ARM GAS  /tmp/ccqXi5Qg.s 			page 5


 202:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** }
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** /**
 207:Core/Src/main.c ****   * @brief USART1 Initialization Function
 208:Core/Src/main.c ****   * @param None
 209:Core/Src/main.c ****   * @retval None
 210:Core/Src/main.c ****   */
 211:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 212:Core/Src/main.c **** {
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 221:Core/Src/main.c ****   huart1.Instance = USART1;
 222:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 223:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 224:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 225:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 226:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 227:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 228:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 229:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 230:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 231:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c **** }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** /**
 242:Core/Src/main.c ****   * @brief GPIO Initialization Function
 243:Core/Src/main.c ****   * @param None
 244:Core/Src/main.c ****   * @retval None
 245:Core/Src/main.c ****   */
 246:Core/Src/main.c **** static void MX_GPIO_Init(void)
 247:Core/Src/main.c **** {
  29              		.loc 1 247 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
ARM GAS  /tmp/ccqXi5Qg.s 			page 6


  40 0002 88B0     		sub	sp, sp, #32
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
 248:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 248 0
  44 0004 0024     		movs	r4, #0
  45 0006 0394     		str	r4, [sp, #12]
  46 0008 0494     		str	r4, [sp, #16]
  47 000a 0594     		str	r4, [sp, #20]
  48 000c 0694     		str	r4, [sp, #24]
  49 000e 0794     		str	r4, [sp, #28]
  50              	.LBB4:
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 251:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  51              		.loc 1 251 0
  52 0010 234B     		ldr	r3, .L3
  53 0012 DA6C     		ldr	r2, [r3, #76]
  54 0014 42F00402 		orr	r2, r2, #4
  55 0018 DA64     		str	r2, [r3, #76]
  56 001a DA6C     		ldr	r2, [r3, #76]
  57 001c 02F00402 		and	r2, r2, #4
  58 0020 0092     		str	r2, [sp]
  59 0022 009A     		ldr	r2, [sp]
  60              	.LBE4:
  61              	.LBB5:
 252:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  62              		.loc 1 252 0
  63 0024 DA6C     		ldr	r2, [r3, #76]
  64 0026 42F00102 		orr	r2, r2, #1
  65 002a DA64     		str	r2, [r3, #76]
  66 002c DA6C     		ldr	r2, [r3, #76]
  67 002e 02F00102 		and	r2, r2, #1
  68 0032 0192     		str	r2, [sp, #4]
  69 0034 019A     		ldr	r2, [sp, #4]
  70              	.LBE5:
  71              	.LBB6:
 253:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  72              		.loc 1 253 0
  73 0036 DA6C     		ldr	r2, [r3, #76]
  74 0038 42F00202 		orr	r2, r2, #2
  75 003c DA64     		str	r2, [r3, #76]
  76 003e DB6C     		ldr	r3, [r3, #76]
  77 0040 03F00203 		and	r3, r3, #2
  78 0044 0293     		str	r3, [sp, #8]
  79 0046 029B     		ldr	r3, [sp, #8]
  80              	.LBE6:
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 256:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
  81              		.loc 1 256 0
  82 0048 164D     		ldr	r5, .L3+4
  83 004a 0122     		movs	r2, #1
  84 004c 4FF40051 		mov	r1, #8192
  85 0050 2846     		mov	r0, r5
  86 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL0:
ARM GAS  /tmp/ccqXi5Qg.s 			page 7


 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 259:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
  88              		.loc 1 259 0
  89 0056 0122     		movs	r2, #1
  90 0058 1146     		mov	r1, r2
  91 005a 4FF09040 		mov	r0, #1207959552
  92 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
  93              	.LVL1:
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 262:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
  94              		.loc 1 262 0
  95 0062 4FF40053 		mov	r3, #8192
  96 0066 0393     		str	r3, [sp, #12]
 263:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 263 0
  98 0068 0126     		movs	r6, #1
  99 006a 0496     		str	r6, [sp, #16]
 264:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 100              		.loc 1 264 0
 101 006c 0594     		str	r4, [sp, #20]
 265:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 265 0
 103 006e 0694     		str	r4, [sp, #24]
 266:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 104              		.loc 1 266 0
 105 0070 03A9     		add	r1, sp, #12
 106 0072 2846     		mov	r0, r5
 107 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 108              	.LVL2:
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 269:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 109              		.loc 1 269 0
 110 0078 0396     		str	r6, [sp, #12]
 270:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 111              		.loc 1 270 0
 112 007a 0496     		str	r6, [sp, #16]
 271:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 271 0
 114 007c 0594     		str	r4, [sp, #20]
 272:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 115              		.loc 1 272 0
 116 007e 0694     		str	r4, [sp, #24]
 273:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 117              		.loc 1 273 0
 118 0080 03A9     		add	r1, sp, #12
 119 0082 4FF09040 		mov	r0, #1207959552
 120 0086 FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL3:
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /*Configure GPIO pins : PC6 PC7 */
 276:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 122              		.loc 1 276 0
 123 008a C023     		movs	r3, #192
 124 008c 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccqXi5Qg.s 			page 8


 277:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 125              		.loc 1 277 0
 126 008e 0494     		str	r4, [sp, #16]
 278:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 278 0
 128 0090 0594     		str	r4, [sp, #20]
 279:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 129              		.loc 1 279 0
 130 0092 03A9     		add	r1, sp, #12
 131 0094 2846     		mov	r0, r5
 132 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 133              	.LVL4:
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** }
 134              		.loc 1 281 0
 135 009a 08B0     		add	sp, sp, #32
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 16
 138              		@ sp needed
 139 009c 70BD     		pop	{r4, r5, r6, pc}
 140              	.L4:
 141 009e 00BF     		.align	2
 142              	.L3:
 143 00a0 00100240 		.word	1073876992
 144 00a4 00080048 		.word	1207961600
 145              		.cfi_endproc
 146              	.LFE137:
 148              		.section	.text.Error_Handler,"ax",%progbits
 149              		.align	2
 150              		.global	Error_Handler
 151              		.thumb
 152              		.thumb_func
 154              	Error_Handler:
 155              	.LFB138:
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c **** /* USER CODE END 4 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c **** /**
 288:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 289:Core/Src/main.c ****   * @retval None
 290:Core/Src/main.c ****   */
 291:Core/Src/main.c **** void Error_Handler(void)
 292:Core/Src/main.c **** {
 156              		.loc 1 292 0
 157              		.cfi_startproc
 158              		@ Volatile: function does not return.
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162              	.LBB7:
 163              	.LBB8:
 164              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
ARM GAS  /tmp/ccqXi5Qg.s 			page 9


   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccqXi5Qg.s 			page 10


  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
ARM GAS  /tmp/ccqXi5Qg.s 			page 11


 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
ARM GAS  /tmp/ccqXi5Qg.s 			page 12


 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 165              		.loc 2 209 0
 166              		.syntax unified
 167              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 168 0000 72B6     		cpsid i
 169              	@ 0 "" 2
 170              		.thumb
 171              		.syntax unified
 172              	.L6:
 173 0002 FEE7     		b	.L6
 174              	.LBE8:
 175              	.LBE7:
 176              		.cfi_endproc
 177              	.LFE138:
 179              		.section	.text.MX_I2C1_Init,"ax",%progbits
 180              		.align	2
 181              		.thumb
 182              		.thumb_func
 184              	MX_I2C1_Init:
 185              	.LFB135:
 164:Core/Src/main.c **** 
 186              		.loc 1 164 0
 187              		.cfi_startproc
ARM GAS  /tmp/ccqXi5Qg.s 			page 13


 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 08B5     		push	{r3, lr}
 191              	.LCFI3:
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 3, -8
 194              		.cfi_offset 14, -4
 173:Core/Src/main.c ****   hi2c1.Init.Timing = 0x10909CEC;
 195              		.loc 1 173 0
 196 0002 1148     		ldr	r0, .L12
 197 0004 114B     		ldr	r3, .L12+4
 198 0006 0360     		str	r3, [r0]
 174:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 199              		.loc 1 174 0
 200 0008 114B     		ldr	r3, .L12+8
 201 000a 4360     		str	r3, [r0, #4]
 175:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 202              		.loc 1 175 0
 203 000c 0023     		movs	r3, #0
 204 000e 8360     		str	r3, [r0, #8]
 176:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 205              		.loc 1 176 0
 206 0010 0122     		movs	r2, #1
 207 0012 C260     		str	r2, [r0, #12]
 177:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 208              		.loc 1 177 0
 209 0014 0361     		str	r3, [r0, #16]
 178:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 210              		.loc 1 178 0
 211 0016 4361     		str	r3, [r0, #20]
 179:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 212              		.loc 1 179 0
 213 0018 8361     		str	r3, [r0, #24]
 180:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 214              		.loc 1 180 0
 215 001a C361     		str	r3, [r0, #28]
 181:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 216              		.loc 1 181 0
 217 001c 0362     		str	r3, [r0, #32]
 182:Core/Src/main.c ****   {
 218              		.loc 1 182 0
 219 001e FFF7FEFF 		bl	HAL_I2C_Init
 220              	.LVL5:
 221 0022 08B1     		cbz	r0, .L8
 184:Core/Src/main.c ****   }
 222              		.loc 1 184 0
 223 0024 FFF7FEFF 		bl	Error_Handler
 224              	.LVL6:
 225              	.L8:
 189:Core/Src/main.c ****   {
 226              		.loc 1 189 0
 227 0028 0021     		movs	r1, #0
 228 002a 0748     		ldr	r0, .L12
 229 002c FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 230              	.LVL7:
 231 0030 08B1     		cbz	r0, .L9
 191:Core/Src/main.c ****   }
ARM GAS  /tmp/ccqXi5Qg.s 			page 14


 232              		.loc 1 191 0
 233 0032 FFF7FEFF 		bl	Error_Handler
 234              	.LVL8:
 235              	.L9:
 196:Core/Src/main.c ****   {
 236              		.loc 1 196 0
 237 0036 0021     		movs	r1, #0
 238 0038 0348     		ldr	r0, .L12
 239 003a FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 240              	.LVL9:
 241 003e 08B1     		cbz	r0, .L7
 198:Core/Src/main.c ****   }
 242              		.loc 1 198 0
 243 0040 FFF7FEFF 		bl	Error_Handler
 244              	.LVL10:
 245              	.L7:
 246 0044 08BD     		pop	{r3, pc}
 247              	.L13:
 248 0046 00BF     		.align	2
 249              	.L12:
 250 0048 00000000 		.word	hi2c1
 251 004c 00540040 		.word	1073763328
 252 0050 EC9C9010 		.word	277912812
 253              		.cfi_endproc
 254              	.LFE135:
 256              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 257              		.align	2
 258              		.thumb
 259              		.thumb_func
 261              	MX_USART1_UART_Init:
 262              	.LFB136:
 212:Core/Src/main.c **** 
 263              		.loc 1 212 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 08B5     		push	{r3, lr}
 268              	.LCFI4:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 3, -8
 271              		.cfi_offset 14, -4
 221:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 272              		.loc 1 221 0
 273 0002 0B48     		ldr	r0, .L17
 274 0004 0B4B     		ldr	r3, .L17+4
 275 0006 0360     		str	r3, [r0]
 222:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 276              		.loc 1 222 0
 277 0008 4FF4E133 		mov	r3, #115200
 278 000c 4360     		str	r3, [r0, #4]
 223:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 279              		.loc 1 223 0
 280 000e 0023     		movs	r3, #0
 281 0010 8360     		str	r3, [r0, #8]
 224:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 282              		.loc 1 224 0
 283 0012 C360     		str	r3, [r0, #12]
ARM GAS  /tmp/ccqXi5Qg.s 			page 15


 225:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 284              		.loc 1 225 0
 285 0014 0361     		str	r3, [r0, #16]
 226:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 286              		.loc 1 226 0
 287 0016 0C22     		movs	r2, #12
 288 0018 4261     		str	r2, [r0, #20]
 227:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 289              		.loc 1 227 0
 290 001a 8361     		str	r3, [r0, #24]
 228:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 291              		.loc 1 228 0
 292 001c C361     		str	r3, [r0, #28]
 229:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 293              		.loc 1 229 0
 294 001e 0362     		str	r3, [r0, #32]
 230:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 295              		.loc 1 230 0
 296 0020 4362     		str	r3, [r0, #36]
 231:Core/Src/main.c ****   {
 297              		.loc 1 231 0
 298 0022 FFF7FEFF 		bl	HAL_UART_Init
 299              	.LVL11:
 300 0026 08B1     		cbz	r0, .L14
 233:Core/Src/main.c ****   }
 301              		.loc 1 233 0
 302 0028 FFF7FEFF 		bl	Error_Handler
 303              	.LVL12:
 304              	.L14:
 305 002c 08BD     		pop	{r3, pc}
 306              	.L18:
 307 002e 00BF     		.align	2
 308              	.L17:
 309 0030 00000000 		.word	huart1
 310 0034 00380140 		.word	1073821696
 311              		.cfi_endproc
 312              	.LFE136:
 314              		.section	.text.SystemClock_Config,"ax",%progbits
 315              		.align	2
 316              		.global	SystemClock_Config
 317              		.thumb
 318              		.thumb_func
 320              	SystemClock_Config:
 321              	.LFB134:
 114:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 322              		.loc 1 114 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 88
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326 0000 00B5     		push	{lr}
 327              	.LCFI5:
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 14, -4
 330 0002 97B0     		sub	sp, sp, #92
 331              	.LCFI6:
 332              		.cfi_def_cfa_offset 96
 115:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
ARM GAS  /tmp/ccqXi5Qg.s 			page 16


 333              		.loc 1 115 0
 334 0004 4422     		movs	r2, #68
 335 0006 0021     		movs	r1, #0
 336 0008 05A8     		add	r0, sp, #20
 337 000a FFF7FEFF 		bl	memset
 338              	.LVL13:
 116:Core/Src/main.c **** 
 339              		.loc 1 116 0
 340 000e 0023     		movs	r3, #0
 341 0010 0093     		str	r3, [sp]
 342 0012 0193     		str	r3, [sp, #4]
 343 0014 0293     		str	r3, [sp, #8]
 344 0016 0393     		str	r3, [sp, #12]
 345 0018 0493     		str	r3, [sp, #16]
 120:Core/Src/main.c ****   {
 346              		.loc 1 120 0
 347 001a 4FF40070 		mov	r0, #512
 348 001e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 349              	.LVL14:
 350 0022 08B1     		cbz	r0, .L20
 122:Core/Src/main.c ****   }
 351              		.loc 1 122 0
 352 0024 FFF7FEFF 		bl	Error_Handler
 353              	.LVL15:
 354              	.L20:
 128:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 355              		.loc 1 128 0
 356 0028 0223     		movs	r3, #2
 357 002a 0593     		str	r3, [sp, #20]
 129:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 358              		.loc 1 129 0
 359 002c 4FF48072 		mov	r2, #256
 360 0030 0892     		str	r2, [sp, #32]
 130:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 361              		.loc 1 130 0
 362 0032 1022     		movs	r2, #16
 363 0034 0992     		str	r2, [sp, #36]
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 364              		.loc 1 131 0
 365 0036 0F93     		str	r3, [sp, #60]
 132:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 1;
 366              		.loc 1 132 0
 367 0038 1093     		str	r3, [sp, #64]
 133:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 10;
 368              		.loc 1 133 0
 369 003a 0122     		movs	r2, #1
 370 003c 1192     		str	r2, [sp, #68]
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 371              		.loc 1 134 0
 372 003e 0A22     		movs	r2, #10
 373 0040 1292     		str	r2, [sp, #72]
 135:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 374              		.loc 1 135 0
 375 0042 0722     		movs	r2, #7
 376 0044 1392     		str	r2, [sp, #76]
 136:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 377              		.loc 1 136 0
ARM GAS  /tmp/ccqXi5Qg.s 			page 17


 378 0046 1493     		str	r3, [sp, #80]
 137:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 379              		.loc 1 137 0
 380 0048 1593     		str	r3, [sp, #84]
 138:Core/Src/main.c ****   {
 381              		.loc 1 138 0
 382 004a 05A8     		add	r0, sp, #20
 383 004c FFF7FEFF 		bl	HAL_RCC_OscConfig
 384              	.LVL16:
 385 0050 08B1     		cbz	r0, .L21
 140:Core/Src/main.c ****   }
 386              		.loc 1 140 0
 387 0052 FFF7FEFF 		bl	Error_Handler
 388              	.LVL17:
 389              	.L21:
 145:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 390              		.loc 1 145 0
 391 0056 0F23     		movs	r3, #15
 392 0058 0093     		str	r3, [sp]
 147:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 393              		.loc 1 147 0
 394 005a 0323     		movs	r3, #3
 395 005c 0193     		str	r3, [sp, #4]
 148:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 396              		.loc 1 148 0
 397 005e 0023     		movs	r3, #0
 398 0060 0293     		str	r3, [sp, #8]
 149:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 399              		.loc 1 149 0
 400 0062 0393     		str	r3, [sp, #12]
 150:Core/Src/main.c **** 
 401              		.loc 1 150 0
 402 0064 0493     		str	r3, [sp, #16]
 152:Core/Src/main.c ****   {
 403              		.loc 1 152 0
 404 0066 0421     		movs	r1, #4
 405 0068 6846     		mov	r0, sp
 406 006a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 407              	.LVL18:
 408 006e 08B1     		cbz	r0, .L19
 154:Core/Src/main.c ****   }
 409              		.loc 1 154 0
 410 0070 FFF7FEFF 		bl	Error_Handler
 411              	.LVL19:
 412              	.L19:
 156:Core/Src/main.c **** 
 413              		.loc 1 156 0
 414 0074 17B0     		add	sp, sp, #92
 415              	.LCFI7:
 416              		.cfi_def_cfa_offset 4
 417              		@ sp needed
 418 0076 5DF804FB 		ldr	pc, [sp], #4
 419              		.cfi_endproc
 420              	.LFE134:
 422 007a 00BF     		.section	.text.main,"ax",%progbits
 423              		.align	2
 424              		.global	main
ARM GAS  /tmp/ccqXi5Qg.s 			page 18


 425              		.thumb
 426              		.thumb_func
 428              	main:
 429              	.LFB133:
  69:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 430              		.loc 1 69 0
 431              		.cfi_startproc
 432              		@ Volatile: function does not return.
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435 0000 08B5     		push	{r3, lr}
 436              	.LCFI8:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 3, -8
 439              		.cfi_offset 14, -4
  77:Core/Src/main.c **** 
 440              		.loc 1 77 0
 441 0002 FFF7FEFF 		bl	HAL_Init
 442              	.LVL20:
  84:Core/Src/main.c **** 
 443              		.loc 1 84 0
 444 0006 FFF7FEFF 		bl	SystemClock_Config
 445              	.LVL21:
  91:Core/Src/main.c ****   MX_I2C1_Init();
 446              		.loc 1 91 0
 447 000a FFF7FEFF 		bl	MX_GPIO_Init
 448              	.LVL22:
  92:Core/Src/main.c ****   MX_USART1_UART_Init();
 449              		.loc 1 92 0
 450 000e FFF7FEFF 		bl	MX_I2C1_Init
 451              	.LVL23:
  93:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 452              		.loc 1 93 0
 453 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 454              	.LVL24:
  95:Core/Src/main.c ****   /* USER CODE END 2 */
 455              		.loc 1 95 0
 456 0016 FFF7FEFF 		bl	BOARD_Init
 457              	.LVL25:
 458              	.L25:
 103:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 459              		.loc 1 103 0 discriminator 1
 460 001a FFF7FEFF 		bl	BOARD_Loop
 461              	.LVL26:
 462 001e FCE7     		b	.L25
 463              		.cfi_endproc
 464              	.LFE133:
 466              		.comm	huart1,132,4
 467              		.comm	hi2c1,84,4
 468              		.text
 469              	.Letext0:
 470              		.file 3 "/home/yuan/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 471              		.file 4 "/home/yuan/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 472              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 473              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 474              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 475              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
ARM GAS  /tmp/ccqXi5Qg.s 			page 19


 476              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 477              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
 478              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 479              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 480              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c_ex.h"
 481              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 482              		.file 15 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 483              		.file 16 "Core/Inc/board.h"
ARM GAS  /tmp/ccqXi5Qg.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccqXi5Qg.s:22     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccqXi5Qg.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccqXi5Qg.s:143    .text.MX_GPIO_Init:000000a0 $d
     /tmp/ccqXi5Qg.s:149    .text.Error_Handler:00000000 $t
     /tmp/ccqXi5Qg.s:154    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccqXi5Qg.s:180    .text.MX_I2C1_Init:00000000 $t
     /tmp/ccqXi5Qg.s:184    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/ccqXi5Qg.s:250    .text.MX_I2C1_Init:00000048 $d
                            *COM*:00000054 hi2c1
     /tmp/ccqXi5Qg.s:257    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccqXi5Qg.s:261    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccqXi5Qg.s:309    .text.MX_USART1_UART_Init:00000030 $d
                            *COM*:00000084 huart1
     /tmp/ccqXi5Qg.s:315    .text.SystemClock_Config:00000000 $t
     /tmp/ccqXi5Qg.s:320    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccqXi5Qg.s:423    .text.main:00000000 $t
     /tmp/ccqXi5Qg.s:428    .text.main:00000000 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_UART_Init
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
BOARD_Init
BOARD_Loop
